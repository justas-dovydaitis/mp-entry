@import "../../variables";
@mixin create-mq($breakpoint, $min-or-max) {
  @if ($breakpoint == 0) {
    @content;
  } @else {
    @media screen and (#{$min-or-max}-width: $breakpoint *1px) {
      @content;
    }
  }
}

@mixin create-col-classes($modifier, $grid-cols, $breakpoint) {
  $spacing: 0.25em;
  @include create-mq($breakpoint, "min") {
    &__col#{$modifier}-offset-0 {
      margin-left: 0;
    }
    @for $i from 1 through $grid-cols {
      $basis: 100 / ($grid-cols / $i) * 1%;
      &__col#{$modifier}-#{$i} {
        flex-basis: calc(#{$basis} - #{$spacing * 2});
        padding: #{$spacing};
      }
      &__col#{$modifier}-offset-#{$i} {
        margin-left: calc(#{$basis} - #{$spacing * 2});
        padding: #{$spacing};
      }
    }
  }
}

@each $modifier, $breakpoint in $map-grid-props {
  @if ($modifier == "") {
    $modifier: "-xs";
  }
  @include create-mq($breakpoint - 1, "max") {
    .hidden#{$modifier}-down {
      display: none !important;
    }
  }
  @include create-mq($breakpoint, "min") {
    .hidden#{$modifier}-up {
      display: none !important;
    }
  }
}

.container {
  max-width: $grid__bp-md * 1px;
  margin: 0 auto;
  &--fluid {
    margin: 0;
    position: relative;
    max-width: 100%;
  }
  &__row {
    display: flex;
    position: relative;
    flex-wrap: wrap;
    width: 100%;
  }
  @each $modifier, $breakpoint in $map-grid-props {
    @include create-col-classes($modifier, $grid__cols, $breakpoint);
  }
}
